1: What's a RubyGem and why would you use one?

	A RubyGem is software that allows you easily download, install and use ruby software packages on your system. A gem is a package which contains Ruby applications or libraries.
	You would use a gem to modify functionality in Ruby apps.  They are used to distribute reusable functionality to be used in apps and libraries.  they can can include command line utilities to help automate tasks and speed up your work.

2: What's the difference between lazy and eager loading?

	The difference is in the case of lazy loading, related objects (child objects) are not loaded automatically with its parent object until they are requested. In eager loading related objects (child objects) are loaded automatically with its parent object.

3: What's the difference between the CREATE TABLE and INSERT INTO SQL statements?

	CREATE TABLE is used to create a new table in a database, and INSERT INTO SQL statements is used to insert new records in a table.

4: What's the difference between extend and include? When would you use one or the other?

	The difference between extend and include is, include mixes in specified module methods as instance methods in the target class, and extent mixes in specified module methods as class methods in the target class. 
	You would use extend give a class access to a modules methods. You would use include when you wanted all instances of a class to have access a modules methods.

5: In persistence.rb, why do the save methods need to be instance (vs. class) methods?

	The save methods need to be instance methods, because we only want to record a change on that specified method and not the entire class. If the change is not made problematic cahnges may happen throughou the entire class.

6: Given the Jar-Jar Binks example earlier, what is the final SQL query in persistence.rb's save! method?

	UPDATE character
	SET name = "Jar-Jar Binks"
	Where id = 1

7: AddressBook's entries instance variable no longer returns anything. We'll fix this in a later checkpoint. What changes will we need to make?

	We need to establish a initialize method for attr_accessor, and include them in bloc_records so that they can be saved to the database as instance variables.

8: Write a Ruby method that converts snake_case to CamelCase using regular expressions (you can test them on Rubular). Send your code to your mentor.

	def convert_case(case_style)
		string = case_style.gsub(/::/, '/')
		string.gsub!(/_/, ' ')
		return string.split.map(&:capitalize).join('')
	end

9: Add a select method which takes an attribute and value and searches for all records that match:

	def find_by(attribute, value)
			row = connection.get_first-row <<-SQL
			SELECT #{columns.join ","} FROM #{table}
			WHERE attribute = #{BlocRecord::Utility.sql_strings(value)}
		SQL
		return find_object(row)
	end

